
<!-- saved from url=(0490)https://cdn.inst-fs-iad-prod.inscloudgate.net/2f48ed51-cfec-4e53-8dcc-c88693c42bd2/project%202020.htm?token=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImNkbiJ9.eyJyZXNvdXJjZSI6Ii8yZjQ4ZWQ1MS1jZmVjLTRlNTMtOGRjYy1jODg2OTNjNDJiZDIvcHJvamVjdCUyMDIwMjAuaHRtIiwidGVuYW50IjoiY2FudmFzIiwidXNlcl9pZCI6IjEwODM1MDAwMDAwMDEwOTM3NiIsImlhdCI6MTU4Njc5NTIwMywiZXhwIjoxNTg2ODgxNjAzfQ.WAF_3CqQhTnRzppSU-trAtTPJsTEyFDDp2GDFVghXtxNwfFcDKf1G08QR7Oba6hijWsx5npX8UCvvch8I5tKLg&download=1&content_type=text%2Fhtml -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Com S 418-518 - Programming Project</title> 
<link rel="stylesheet" href="./Com S 418-518 - Programming Project_files/homepage.css" type="text/css">
</head>

<body bgcolor="white" vlink="red" data-gr-c-s-loaded="true"> 

<center>
<h2>Programming Project: Voronoi Diagram and Delaunay Triangulation </h2>
<h3>Com S 418/518 </h3>
<h3>(100 pts + 30 bonus pts)</h3> 
Due Apr 27 - May 1, 2020<br><br>


</center>

In this programming project, you are asked to implement Fortune's
algorithm for Voronoi diagram construction, as well as construction of the
Delaunay triangulation via its duality to the Voronoi diagram. 

You are allowed to use <font color="red"><b>any programming language</b></font> in the implementation.




<h3> Doubly Connected Edge List</h3>

Recall from the textbook (pp. 29-33) that a DCEL includes three types of
records.  In this project, a half-edge from, say, vertex <tt>v4</tt> to vertex
<tt>v5</tt>, should be named <tt>e4,5</tt>; hence its twin half-edge is named <tt>e5,4</tt>.

<p> 

Consider the planar subdivision defined by a triangle with vertices 
<tt>v1 = (0, 0)</tt>, <tt>v2 = (1, 0)</tt>, and <tt>v3 = (0, 1)</tt>.  
Let <tt>f1</tt> be the face bounded by the triangle and <tt>f2</tt> be the
unbounded face.  The following output is a valid DCEL representation
of this triangle.

</p><p> 

<tt>
v1  (0, 0)  e1,2<br>
v2  (1, 0)  e2,3<br>
v3  (0, 1)  e3,2<br><br>

f1  e2,3  nil <br>
f2  nil  e1,3 <br><br>

e1,2  v1  e2,1  f1  e2,3  e3,1<br>
e2,1  v2  e1,2  f2  e1,3  e3,2<br>
e1,3  v1  e3,1  f2  e3,2  e2,1<br>
e3,1  v3  e1,3  f1  e1,2  e2,3<br>
e2,3  v2  e3,2  f1  e3,1  e1,2<br>
e3,2  v3  e2,3  f2  e2,1  e1,3<br><br>
</tt> 

Always leave <b>two</b> blank spaces between adjacent names on each
line, and <b>one</b> blank line between records of different types.
</p><p> 


</p><h3>Naming Convention</h3> 

The input file <tt>sites.txt</tt> consists of multiple lines, each
listing the coordinates of one or more point sites separated by
blanks.  For example, the following input file describes five point
sites (2, -3), (-10, 9), (0, 0), (-5, -2), and (4, -7):

<p> 

<tt>
(2, -3)   (-10, 9)  (0, 0)<br>
(-5, -2)  (4, -7)<br>
</tt>

</p><p> 

The output "name" of a geometric or graph entity (e.g., a vertex, an edge, etc.) should follow the 
convention below. In the case that an object-oriented 
programming language such as Java is used, this name refers to the printed name of the object of some class 
to represent the geometric entity as generated by 
the class's <tt>toString()</tt> method, not the name of a variable referencing the object. 

</p><ul>
<li> In your code, the name of a site starts with the letter 'p' and is
followed by a number indicating its order in the input.  For the previous
input example, the site <tt>p2 = (-10, 9)</tt> while the site <tt>p3 = (0, 0)</tt>.

<p>

</p></li><li> In the DCEL representing the (growing) Voronoi diagram, each Voronoi vertex
 has its name starting with the letter 'v' and ending with a number 
(which starts at 1 and goes up consecutively). For instance,
<tt>v5</tt> refers to the fifth vertex in the constructed Voronoi diagram.

<p>

</p></li><li> Every Voronoi cell corresponds to a face in the DCEL. It is named by concatenating the letter 'c' with the
integer that labels the corresponding site.  In the same example above, <tt>c4</tt> refers 
to the Voronoi cell defined by the site <tt>p4 = (-5, -2)</tt>. This cell includes 
all the points that are closer to <tt>p4</tt>
than to every other site.   

<p>

</p></li><li> The naming convention for half-edges follows from the section "Doubly
Connected Edge List". 

<p>

</p></li><li> The four vertices of the diagram's bounding box are named <tt>b1</tt>, <tt>b2</tt>, <tt>b3</tt>, <tt>b4</tt> 
counterclockwise from the lower left vertex.


<p>

</p></li><li> All the rays end at points on the four sides of the box.  These endpoints,
though not real Voronoi vertices, are named with the letter 'b' followed by 
a number starting at 5 and increasing consecutively.  


<p>

</p></li><li> The unbounded face is named <tt>uf</tt>.

</li></ul>


<h3>Voronoi Diagram</h3> 

In the first part of this project, you are asked to implement
Fortune's plane sweep algorithm that constructs the Voronoi diagram in
<i>O</i>(<i>n</i> log <i>n</i>) time.
Your code should handle the following degeneracies: 
<ol> 
<li> All the sites are collinear.
</li><li> All the sites are cocircular.
</li><li> Multiple events occur at the position of the same sweep. The situation may include
<ol type="a"> 
<li> multiple site events only; 
</li><li> multiple circle events (possibly involving different circles) only; 
</li><li> at least one site event and at least one circle event; 
</li><li> a site appearing right below some break point of the beach line (also seen as a 
special case of 3c).
</li></ol> 
</li></ol> 


<h3>Delaunay Triangulation</h3> 

Your code should then construct the Delaunay triangulation from the
generated DCEL representation of the Voronoi diagram.  

<ul>
<li> The triangulation is represented by another DCEL with its vertices being the
point sites in the original input.  For instance, the vertex <tt>p2</tt>
corresponds to the second point site in the original input.  (Note that every vertex's name 
starts with the letter 'p'.)
<p> 

</p></li><li> The name of each triangle in the DT starts with the letter 't'
and is followed by an integer (which increases consecutively from 1).

<p> 

</p></li><li> A half-edge, say, from the site <tt>p6</tt> to the site <tt>p2</tt>, should be
named as <tt>d6,2</tt> beginning with the letter 'd'.

<p> 

</p></li><li> The unbounded region in the subdivision is still named <tt>uf</tt>. 

</li></ul>


<h3>Output</h3>

Your code will read from a file <i>name</i><tt>.txt</tt> (<i>name</i> being a string of digits, English letters,
and dash) and output in
the file <tt>voronoi.txt</tt>. The output includes the DCELs of the
constructed Voronoi diagram and Delaunay triangulation like below.

<p> 
<tt>
****** Voronoi diagram ******<br><br>

...<br><br><br>


****** Delaunay triangulation ******<br><br>

...<br><br><br>

</tt>


</p><h3>Graphics (for bonus points)</h3>

You may receive up to 30 bonus points for graphical display and animation of
the execution of Fortune's algorithm.  Some possible animation features are
the sweep line motion, propagation of the beach line, and tracing
of Voronoi edges by the break points.


<h3>Submission and Code Demonstration</h3>


Please schedule a 20-minute appointment with the TA Matthew Gardner 
(<tt>mattga@iastate.edu</tt>) during the dead week of April 27 
- May 1 for a live demonstration. Be sure to submit 
a zip file of your code online <font color="red"><b>before your appointment</b></font>. 
During the appointment, your code will be tested 
using our input files, and graded based on the test results and your answers to questions 
posed by the TA. 
<br><br>



</body></html>